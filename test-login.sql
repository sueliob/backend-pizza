-- ==============================================
-- üîç DIAGN√ìSTICO DE LOGIN (Execute no Neon SQL Editor)
-- ==============================================

-- 1. Verificar se pgcrypto est√° habilitado
SELECT 
  CASE 
    WHEN COUNT(*) > 0 THEN '‚úÖ pgcrypto HABILITADO'
    ELSE '‚ùå pgcrypto N√ÉO HABILITADO - Execute: CREATE EXTENSION IF NOT EXISTS pgcrypto;'
  END as status
FROM pg_extension 
WHERE extname = 'pgcrypto';

-- 2. Verificar se existe admin
SELECT 
  username,
  email,
  is_active,
  LEFT(password_hash, 30) || '...' as hash_preview,
  CASE 
    WHEN password_hash LIKE '$2a$%' THEN '‚úÖ Hash pgcrypto v√°lido ($2a$)'
    WHEN password_hash LIKE '$2b$%' THEN '‚ö†Ô∏è Hash bcryptjs ($2b$) - pode n√£o funcionar com pgcrypto'
    ELSE '‚ùå Hash inv√°lido'
  END as hash_type
FROM admin_users
WHERE username = 'admin';

-- 3. Testar login direto (mesma query do backend)
-- Senha: pizzaria123
SELECT 
  id, 
  username, 
  role,
  CASE 
    WHEN COUNT(*) > 0 THEN '‚úÖ LOGIN V√ÅLIDO'
    ELSE '‚ùå LOGIN INV√ÅLIDO (usu√°rio n√£o existe ou senha errada)'
  END as resultado
FROM admin_users
WHERE username = 'admin'
  AND is_active = true
  AND password_hash = crypt('pizzaria123', password_hash)
GROUP BY id, username, role;

-- ==============================================
-- üìã INTERPRETA√á√ÉO DOS RESULTADOS
-- ==============================================
-- 
-- Se query 1 retornar "‚ùå pgcrypto N√ÉO HABILITADO":
--   ‚Üí Execute: CREATE EXTENSION IF NOT EXISTS pgcrypto;
--
-- Se query 2 n√£o retornar nada:
--   ‚Üí Admin n√£o existe, execute production-seed-pgcrypto.sql
--
-- Se query 2 retornar "‚ùå Hash inv√°lido":
--   ‚Üí Delete e recrie: DELETE FROM admin_users WHERE username='admin';
--   ‚Üí Depois execute production-seed-pgcrypto.sql
--
-- Se query 3 retornar "‚ùå LOGIN INV√ÅLIDO":
--   ‚Üí Hash incompat√≠vel, delete e recrie admin
--
-- Se query 3 retornar "‚úÖ LOGIN V√ÅLIDO":
--   ‚Üí Backend est√° correto, problema √© no frontend/CORS
